# pylint: disable= W0238 C0103 C0301

from zeroconf import Zeroconf
from threading import Lock, Thread
from time import sleep
from enum import Enum
from typing import Any, Dict, Tuple
import socket
import json
import sys
from prettytable import PrettyTable

from utils import server_config, LinkedStack


class GameStatus(Enum):
    """
    Classe Enum que representa o status de um jogo.
    """
    NO_CONNECTION = 0
    NO_GAME = 1
    GAME_IN_PROGRESS = 2
    GAME_FINISHED = 3


class Client:
    """
        Inicializa a classe Client.
    """

    SHOW_TABLE_INPUT = "TABELA"

    def __init__(self) -> None:
        self.__HOST: str = '127.0.0.1'
        self.__MSG_SIZE, self.__PORT = server_config()
        self.__sock: socket.socket = None
        self.__zeroconf = Zeroconf()
        self.__servers = {}
        self.__servers_Lock = Lock()
        self.__game_status: GameStatus = GameStatus.NO_CONNECTION
        self.__user_name: str = None
        self.__words_stack = LinkedStack()
        self.__table = PrettyTable()
        self.__scores_table = PrettyTable()
        self.__show_table = True

    def __discover_servers(self):
        # Descobrir servi칞os
        while self.__game_status == GameStatus.NO_CONNECTION:
            try:
                with self.__servers_Lock:
                    server = self.__zeroconf.get_service_info("Termo._server._tcp.local.", "_server._tcp.local.",
                                                          timeout=5000)

                self.__servers_Lock.acquire()
                if server:
                    self.__servers[server.properties.get(
                        b'server_name').decode('utf-8')] = {"server": server}
                self.__servers_Lock.release()
                # sleep(2)
                # for server in self.__servers.items():
                #     if server["ttl"] == 0:
                #         name_server = self.__servers[server.properties.get(
                #         b'server_name').decode('utf-8')]
                #         del self.__servers[name_server]
                #     else:
                #         server["ttl"] -= 1
                # self.__servers_Lock.release()
            except KeyboardInterrupt:
                sys.exit(0)
            except Exception as e:
                print(e)
                print(
                    "Erro ao procurar servidores dispon칤veis, tente novamente mais tarde.")

    def __show_servers(self):
        self.__servers_Lock.acquire()
        if self.__servers == {}:
            print("Nenhum servidor encontrado.")
            return

        print("Servidores dispon칤veis:")
        for server in self.__servers.values():
            # server_status = ""
            # if server["ttl"] > 3:
            #     server_status = "游릭"
            # elif server["ttl"] >= 1:
            #     server_status = "游리"
            # elif server["ttl"] == 0:
            #     server_status = "游댮"

            print(f"  Nome do Servidor: {
                server['server'].properties.get(b'server_name').decode('utf-8')}")
            print(f"  Endere칞o IP: {socket.inet_ntoa(
                server['server'].addresses[0])}")
            print(f"  Porta: {server['server'].port}")
        self.__servers_Lock.release()

    def __connect_to_server(self):
        """
        Estabelece uma conex칚o com o servidor.

        Args:
            self: A inst칙ncia da classe Client.

        Returns:
            socket.socket: O objeto de socket que representa a conex칚o estabelecida.

        Raises:
            socket.error: Se n칚o for poss칤vel estabelecer a conex칚o 
            com o servidor ap칩s 5 tentativas.
        """
        name_server = ""
        self.__sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        thread_discover_servers = Thread(target=self.__discover_servers)
        thread_discover_servers.start()
        sleep(3)
        while not name_server:
            try:
                print(
                    "\033[90mAperte ENTER para atualizar a lista de servidores\033[0m")
                self.__show_servers()
                name_server = input("Digite o nome do servidor: ")

                if not name_server:
                    continue

                server = self.__servers.get(name_server)
                if server:
                    self.__sock.connect(
                        (socket.inet_ntoa(server["server"].addresses[0]), server["server"].port))
                    self.__game_status = GameStatus.NO_GAME
                    break
                else:
                    raise socket.error(
                        "Servidor n칚o encontrado. Verifique se o servidor est치 ativo e tente novamente.")
            except socket.error as err:
                print(str(err))
                continue
            except KeyboardInterrupt:
                print("Encerrando o Termo!")
                exit(0)

        raise socket.error(
            "N칚o foi poss칤vel conectar ao servidor. Tente reiniciar o cliente.")

    def __render_menu_table(self) -> None:
        """
        Renderiza uma tabela com as op칞칫es dispon칤veis para o usu치rio.

        Args:
            self: A refer칡ncia para a inst칙ncia da classe.

        """
        self.__table.clear_rows()
        self.__table.field_names = ["Op칞칚o", "Descri칞칚o"]
        self.__table.add_row(["start", "Come칞ar um jogo"])
        self.__table.add_row(["stop", "Encerrar jogo atual"])

        if self.__game_status != GameStatus.NO_GAME:
            self.__table.add_row(["try", "Tentar acertar a palavra secreta"])
            self.__table.add_row(
                ["list", "Listar palavras digitadas nesta rodada"])
            self.__table.add_row(["reset", "Reiniciar o jogo atual"])

        self.__table.align["Op칞칚o"] = "l"
        self.__table.align["Descri칞칚o"] = "l"

        print(self.__table)

    def __render_score_table(self, rounds_scores: dict, total_score: float) -> str:
        """
        Renderiza uma tabela com os scores das rodadas.

        Args:
            self: A refer칡ncia para a inst칙ncia da classe.

        """
        self.__scores_table.clear_rows()
        self.__scores_table.title = f"Pontua칞칚o de {self.__user_name}"
        self.__scores_table.field_names = list(rounds_scores.keys())
        self.__scores_table.add_row(list(rounds_scores.values()))
        self.__scores_table.add_column("Pontua칞칚o Total", [total_score])

        self.__scores_table.align["Rodada"] = "c"
        self.__scores_table.align["Pontua칞칚o Total"] = "c"

        print("")
        print(self.__scores_table)

    def __process_user_command(self, user_command: str) -> Tuple[str, Any]:
        """
        Processa o comando do usu치rio e retorna uma tupla contendo 
        o comando e o par칙metro correspondente.

        Args:
            user_command (str): O comando fornecido pelo usu치rio.

        Returns:
            Tuple[str, Any]: Uma tupla contendo o comando e o par칙metro correspondente.

        Raises:
            ValueError: Se o comando fornecido pelo usu치rio for inv치lido.
        """
        if user_command == "start":
            command = "start_game"
            parameter = self.__user_name

        elif user_command == "stop":
            command = "exit_game"
            parameter = None

        elif user_command == "try" and self.__game_status == GameStatus.GAME_IN_PROGRESS:
            command = "check_word"
            user_input = input('Digite uma palavra: ')
            parameter = user_input.lower()

        elif user_command == "list" and self.__game_status == GameStatus.GAME_IN_PROGRESS:
            command = "list_words"
            parameter = None

        elif user_command == "reset" and self.__game_status == GameStatus.GAME_IN_PROGRESS:
            command = "restart_game"
            parameter = self.__user_name

        else:
            raise ValueError("Comando inv치lido:" + " " + user_command)

        return (command, parameter)

    def __send_requisition(self, req_body: Dict[str, Any]) -> Dict[str, Any]:
        """
        Envia uma requisi칞칚o para o servidor.

        Args:
            req_body (Dict[str, Any]): O corpo da requisi칞칚o em formato de dicion치rio.

        Returns:
            Dict[str, Any]: Os dados da resposta do servidor em formato de dicion치rio.

        Raises:
            OSError: Se ocorrer um erro ao enviar ou receber dados pelo socket.
            json.JSONDecodeError: Se ocorrer um erro ao decodificar a resposta do servidor.
        """
        json_data = json.dumps(req_body)
        self.__sock.sendall(json_data.encode())

        response = self.__sock.recv(self.__MSG_SIZE)
        response_data = json.loads(response)
        return response_data

    def __print_welcome_message(self) -> None:
        """
        Exibe uma mensagem de boas-vindas.
        """
        print(f"\n{'=' * 50}\nBem vindo ao jogo de palavras Termo!\n{'=' * 50}")

    def __get_username(self) -> str:
        """
        Solicita ao usu치rio um nickname.
        """
        user_name = input("Digite seu nome de usu치rio: ")

        if user_name.strip() == "":
            return "An칪nimo"

        return user_name

    def __get_user_command(self) -> str:
        """
        Solicita ao usu치rio um comando.
        """
        return input('\nTermo> ')

    def __print_exit_message(self) -> None:
        """
        Exibe a mensagem de instru칞칚o para caso o jogador deseje encerrar o jogo.
        """
        state_to_show = "ocultar" if self.__show_table else "exibir"
        print()
        print(f"\033[90mDigite {Client.SHOW_TABLE_INPUT} para {
              state_to_show} a tabela de menu\033[0m")
        print("\033[90mPressione Ctrl + C para sair do jogo!\033[0m")

    def __print_end_game_message(self) -> None:
        """
        Exibe uma mensagem de fim de jogo.
        """
        print("\nA rodada acabou! Deseja continuar jogando?")

    def __print_goodbye_message(self) -> None:
        """
        Exibe uma mensagem de despedida.
        """
        print(f'\nAt칠 a pr칩xima, {
              self.__user_name}! Obrigado por jogar o Termo!')

    def __handle_keyboard_interrupt(self) -> None:
        """
        Lida com a interrup칞칚o do teclado.

        Fecha o socket e encerra o programa com uma mensagem.

        """
        print(f"\nObrigado por jogar, {
              self.__user_name}!\n Foi feito com 仇벒잺  em 游냀\n")
        self.__sock.close()
        sys.exit(0)

    def __create_request_body(self, command: str, parameter: Any) -> Dict[str, Any]:
        """
        Cria o corpo da requisi칞칚o com base no comando e par칙metro fornecidos.

        Args:
            command (str): O comando da requisi칞칚o.
            parameter (Any): O par칙metro da requisi칞칚o.

        Returns:
            Dict[str, Any]: O corpo da requisi칞칚o.
        """
        return {
            "command": command,
            "parameter": parameter
        }

    def __get_user_end_game_option(self) -> str:
        """
        Solicita ao usu치rio a op칞칚o de continuar ou sair do jogo.

        Returns:
            str: A op칞칚o escolhida pelo usu치rio ('1' para continuar ou '2' para sair).
        """
        usr_input = input('Digite 1 para continuar ou 2 para sair: ')

        while usr_input not in ['1', '2']:
            usr_input = input('Digite uma op칞칚o v치lida (1/2): ')

        return usr_input

    def __return_attempts(self, remaining_attempts, status_code) -> str:
        """
        Retorna uma string com o n칰mero de tentativas restantes ou o n칰mero de tentativas at칠 agora.

        Args:
            remaining_attempts (int): O n칰mero de tentativas restantes.

        Returns:
            str: A string contendo o n칰mero de tentativas restantes ou o n칰mero de tentativas at칠 agora.
        """
        if remaining_attempts >= 0 and status_code == 202:
            return f"Tentativas Restantes: {(remaining_attempts) - 1}"

        elif remaining_attempts >= 0:
            return f"Tentativas Restantes: {remaining_attempts}"

        return f"N칰mero de tentativas at칠 agora: {len(self.__words_stack)}"

    def __check_exit_game(self, option) -> bool:
        """
        Verifica se o jogo deve ser encerrado com base na op칞칚o selecionada.

        Args:
            option (str): A op칞칚o selecionada.

        Returns:
            bool: True se o jogo deve ser encerrado, False caso contr치rio.

        """
        if option == '1':
            self.__game_status = GameStatus.GAME_IN_PROGRESS
            return False

        self.__game_status = GameStatus.GAME_FINISHED
        return True

    def __game_continued_action(self) -> None:
        """
        Executa a a칞칚o de continuar o jogo.

        Envia uma requisi칞칚o para o servidor solicitando a continua칞칚o do jogo.
        Caso a requisi칞칚o seja bem-sucedida, renderiza a resposta do servidor.
        Caso contr치rio, exibe uma mensagem de erro.

        Raises:
            OSError: Ocorre quando h치 um erro ao enviar ou receber dados pelo socket.
            json.JSONDecodeError: Ocorre quando h치 um erro ao decodificar a resposta do servidor.
        """
        req_body = {
            "command": "continue_game",
            "parameter": None
        }

        for _ in range(3):
            try:
                response_data = self.__send_requisition(req_body)
                response_status = response_data["status_code"]

                self.__render_response(
                    response_status, player_name=self.__user_name)
                return

            except OSError:
                print("Ocorreu um erro ao enviar ou receber dados pelo socket.")

            except json.JSONDecodeError:
                print("Ocorreu um erro ao decodificar a resposta do servidor.")

        print("Ocorreu um erro ao continuar o jogo. Por favor, considere reiniciar")

    def __format_output(self, word, format_instructions) -> str:
        """
        Formata a palavra com base na lista de codifica칞칚o fornecida.

        Args:
            word (str): A palavra a ser formatada.
            format_instructions (list): A lista que cont칠m as instru칞칫es de formata칞칚o.

        Returns:
            str: A string formatada.
        """
        if word and format_instructions:
            output = ''
            for index, items in enumerate(format_instructions):
                if items == 2:
                    output += "\033[92m" + word[index] + "\033[0m"
                elif items == 1:
                    output += "\033[93m" + word[index] + "\033[0m"
                else:
                    output += "\033[90m" + word[index] + "\033[0m"

            return output

        return

    def __secret_word_animation(self, word) -> None:
        """
        Realiza uma anima칞칚o para exibir a palavra secreta.

        Args:
            word (str): A palavra secreta a ser exibida.

        """
        transformed_word = ['_' for _ in word]

        print("Voc칡 n칚o conseguiu acertar a palavra secreta!\nA palavra era:\n")

        for i, char in enumerate(word):
            transformed_word[i] = char
            print(''.join(transformed_word))
            sleep(1)

    def __render_response(self, response_status: int, **extra_info):
        """
        Renderiza a resposta com base no status recebido.

        Args:
            response_status (int): O status da resposta.
            **extra_info: Informa칞칫es adicionais.


        """
        if 200 <= response_status < 400:
            self.__handle_successful_cases(response_status, **extra_info)

        elif 400 <= response_status < 500:
            self.__handle_error_cases(response_status, **extra_info)

    def __handle_successful_cases(self, response_status, **extra_info):
        """
        Lida com os casos de sucesso com base no c칩digo de status da resposta.

        Args:
            response_status (int): O c칩digo de status da resposta.
            **extra_info: Informa칞칫es adicionais passadas como argumentos de palavra-chave.

        """
        remaining_attempts = extra_info.get("remaining_attempts")
        format_output = extra_info.get("format_output")
        secret_word = extra_info.get("secret_word")
        player_name = extra_info.get("player_name")

        match response_status:
            case 200:
                print("Jogo Iniciado com Sucesso")
                print("\n\033[1mTutorial b치sico:\033[0m")
                print("\033[90ma\033[0m - Letra n칚o faz parte da palavra")
                print(
                    "\033[93ma\033[0m - Letra faz parte da palavra, mas em outra posi칞칚o")
                print(
                    "\033[92ma\033[0m - Letra faz parte da palavra nessa posi칞칚o")
                print("Bom jogo!\n")

            case 201:
                print("Jogo Finalizado com Sucesso")

            case 202:
                print(f'\n游끥 Parab칠ns! Palavra Correta! 游땙\nLista de Palavras Anteriores:\
                      n{(self.__words_stack)}\n{self.__return_attempts(remaining_attempts, response_status)}')
                self.__render_score_table(extra_info.get(
                    "rounds_scores"), extra_info.get("total_score"))
                self.__words_stack.clear()

            case 203:
                self.__words_stack.stack_up(format_output)
                print(f"\nPalavra Incorreta!\n{format_output}\n{
                      self.__return_attempts(remaining_attempts, response_status)}")

            case 204:
                if self.__words_stack:
                    print(f"Lista de Palavras:\n{self.__words_stack}")
                else:
                    print("N칚o h치 palavras inseridas nesta rodada!")

            case 205:
                print("Jogo reiniciado com sucesso")
                self.__words_stack.clear()

            case 206:
                print(f"Jogo Continuado com Sucesso, Boa Sorte na Pr칩xima Rodada {
                      player_name}!")

            case 207:
                self.__words_stack.stack_up(format_output)
                print(f"\nPalavra Incorreta!\n{format_output}\n{
                      self.__return_attempts(remaining_attempts, response_status)}")

                self.__words_stack.clear()
                self.__secret_word_animation(secret_word)
                self.__render_score_table(extra_info.get(
                    "rounds_scores"), extra_info.get("total_score"))

    def __handle_error_cases(self, response_status, **remaining_attempts):
        """
        Manipula os casos de erro de resposta do servidor.

        Args:
            response_status (int): O c칩digo de status da resposta.
            remaining_attempts (dict): Dicion치rio contendo as tentativas restantes.

        """
        remaining_attempts = remaining_attempts.get("remaining_attempts")

        match response_status:
            case 400:
                print("Jogo j치 iniciado")

            case 401:
                print("Jogo n칚o iniciado")

            case 402:
                print(f"칄 necess치rio digitar uma palavra\n{
                      self.__return_attempts(remaining_attempts, response_status)}")

            case 403:
                print(f"A palavra deve ter 5 letras\n{
                      self.__return_attempts(remaining_attempts, response_status)}")

            case 404:
                print(f'A palavra n칚o existe no dicion치rio\n{
                      self.__return_attempts(remaining_attempts, response_status)}')

            case 405:
                print(f'Palavra j치 utilizada\n{self.__return_attempts(
                    remaining_attempts, response_status)}')

            case 499:
                print("\033[91m Comando inv치lido\033[0m")

                if remaining_attempts:
                    print(f'{self.__return_attempts(
                        remaining_attempts, response_status)}')

    def __handle_response_status(self, response_status: int, response_data: Dict[str, Any], parameter: Any) -> None:
        """
        Trata o status de resposta recebido do servidor.

        Args:
            response_status (int): O c칩digo de status da resposta HTTP.
            response_data (Dict[str, Any]): Os dados de resposta recebidos do servidor.
            parameter (Any): Um par칙metro adicional.

        """
        remaining_attempts = response_data.get("remaining_attempts")
        if response_status == 200:
            self.__render_response(response_status)
            self.__game_status = GameStatus.GAME_IN_PROGRESS

        elif response_status == 201:
            self.__render_response(response_status)
            self.__game_status = GameStatus.NO_GAME

        elif response_status == 202:
            self.__render_response(response_status, remaining_attempts=remaining_attempts,
                                   rounds_scores=response_data["rounds_scores"], total_score=response_data["total_score"])

            self.__print_end_game_message()
            option = self.__get_user_end_game_option()

            if self.__check_exit_game(option):
                self.__print_goodbye_message()
                self.__sock.close()
                sys.exit(0)

            self.__game_continued_action()

        elif response_status == 203:
            color_str = self.__format_output(
                parameter, response_data["word_encoded"])
            self.__render_response(
                response_status, format_output=color_str, remaining_attempts=remaining_attempts)

        elif response_status == 206:
            self.__render_response(
                response_status, player_name=self.__user_name)

        elif response_status == 207:
            color_str = self.__format_output(
                parameter, response_data["word_encoded"])

            self.__render_response(response_status, format_output=color_str, secret_word=response_data["secret_word"], rounds_scores=response_data[
                                   "rounds_scores"], total_score=response_data["total_score"], remaining_attempts=remaining_attempts)

            self.__print_end_game_message()
            option = self.__get_user_end_game_option()

            if self.__check_exit_game(option):
                self.__print_goodbye_message()
                self.__sock.close()
                sys.exit(0)

            self.__game_continued_action()
        else:
            self.__render_response(
                response_status, remaining_attempts=remaining_attempts)

    def run(self) -> None:
        """
        Executa a aplica칞칚o cliente.

        Este m칠todo estabelece uma conex칚o com o servidor, solicita ao usu치rio um nome de usu치rio
        e entra em um loop onde exibe uma tabela, solicita ao usu치rio um comando, envia
        o comando para o servidor e trata a resposta.

        Raises:
            KeyboardInterrupt: Se o usu치rio interromper o programa.
            ValueError: Se um valor inv치lido for inserido pelo usu치rio.
            Exception: Se ocorrer qualquer outra exce칞칚o.
        """
        try:
            self.__sock = self.__connect_to_server()
            self.__print_welcome_message()
            self.__user_name = self.__get_username()

            while True:
                try:
                    if self.__show_table:
                        self.__render_menu_table()
                    self.__print_exit_message()
                    user_cmd = self.__get_user_command()

                    if user_cmd.strip().upper() == Client.SHOW_TABLE_INPUT:
                        self.__show_table = not self.__show_table
                        print()
                        continue

                    command, parameter = self.__process_user_command(user_cmd)
                    req_body = self.__create_request_body(command, parameter)

                    response_data = self.__send_requisition(req_body)
                    response_status = response_data["status_code"]

                    self.__handle_response_status(
                        response_status, response_data, parameter)

                except KeyboardInterrupt:
                    self.__handle_keyboard_interrupt()

                except ValueError as e:
                    print(str(e))
                    continue

                except Exception as e:
                    print(str(e))
                    continue

        except Exception as e:
            print(str(e))
        return
